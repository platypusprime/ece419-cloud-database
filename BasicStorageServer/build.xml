<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build-jar" name="Basic Storage Server" xmlns:ivy="antlib:org.apache.ivy.ant">

  <property environment="env"/>
  <property name="debuglevel" value="source,lines,vars"/>
  <property name="target" value="1.8"/>
  <property name="source" value="1.8"/>

  <!-- Directory information -->
  <property name="build.dir"     value="bin"/>
  <property name="src.dir"       value="src"/>
  <property name="lib.dir"       value="lib"/>
  <property name="dependencies.jar.file" value="${lib.dir}/dependencies-all.jar" />

  <!-- Configuration for client application -->
  <property name="clientjar.file" value="m2-client.jar"/>
  <property name="clientmanifest.file" value="CLIENT_MANIFEST.MF"/>
  <property name="clientmain.class" value="app_kvClient.KVClient"/>

  <!-- Configuration for server application -->
  <property name="serverjar.file" value="m2-server.jar"/>
  <property name="servermanifest.file" value="SERVER_MANIFEST.MF"/>
  <property name="servermain.class" value="app_kvServer.KVServer"/>

  <!-- Configuration for ECS application -->
  <property name="ecsjar.file" value="m2-ecs.jar"/>
  <property name="ecsmanifest.file" value="ECS_MANIFEST.MF"/>
  <property name="ecsmain.class" value="app_kvECS.ECSClient"/>

  <!-- Configuration for Ivy -->
  <property name="ivy.install.version" value="2.4.0-rc1" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <!-- Configuration for Zookeeper -->
  <property name="zk.version" value="3.4.11" />
  <property name="zk.home.dir" value="${basedir}/zookeeper" />
  <property name="zk.unzip.dir" value="${zk.home.dir}/zookeeper-${zk.version}" />
  <property name="zk.bin.dir" value="${zk.unzip.dir}/bin" />
  <property name="zk.server.script" value="${zk.bin.dir}/zkServer.sh" />
  <property name="zk.conf.dir" value="${zk.unzip.dir}/conf" />
  <property name="zk.conf.file" value="${zk.conf.dir}/zoo.cfg" />
  <property name="zk.data.dir" value="${zk.home.dir}/data" />

  <!-- Class path -->
  <path id="project.classpath">
    <fileset dir="${basedir}">
      <include name="${lib.dir}/*.jar" />
      <exclude name="${lib.dir}/*sources.jar" />
      <exclude name="${lib.dir}/*javadoc.jar" />
    </fileset>
  </path>

  <!-- ========= Ivy targets START ========= -->
  <target name="check-ivy" description="checks if the ivy jar exists">
    <condition property="ivy.missing">
      <not>
        <available file="${ivy.jar.file}" />
      </not>
    </condition>
  </target>

  <target name="download-ivy" unless="offline" depends="check-ivy" if="ivy.missing" description="download ivy from apache web site">
    <mkdir dir="${ivy.jar.dir}" />
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
  </target>

  <target name="init-ivy" depends="download-ivy" description="try to load ivy from ivy home">
    <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar" />
    </path>

    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
  </target>

  <target name="resolve" description="retrieve dependencies with ivy" depends="init-ivy">
    <ivy:retrieve />
  </target>
  <!-- ========= Ivy targets END ========= -->

  <!-- ========= ZooKeeper targets START ========= -->
  <target name="check-zookeeper" description="checks if the zookeeper tar exists">
    <condition property="zk.missing">
      <not>
        <available file="${zk.home.dir}/zookeeper-${zk.version}.tar.gz" />
      </not>
    </condition>
  </target>

  <target name="download-zookeeper" unless="offline" depends="check-zookeeper" if="zk.missing" description="download zookeeper from apache web site">
    <mkdir dir="${zk.home.dir}" />
    <get src="https://archive.apache.org/dist/zookeeper/zookeeper-${zk.version}/zookeeper-${zk.version}.tar.gz" dest="${zk.home.dir}" usetimestamp="true" />
    <untar src="${zk.home.dir}/zookeeper-${zk.version}.tar.gz" dest="${zk.home.dir}" compression="gzip" />
  </target>

  <target name="write-zoo-cfg" depends="download-zookeeper" description="writes the zookeeper config file">
    <touch file="${zk.conf.file}" />
    <propertyfile file="${zk.conf.file}">
      <entry  key="tickTime" 	value="2000" />
      <entry  key="initLimit" 	value="10" />
      <entry  key="syncLimit" 	value="5" />
      <entry  key="dataDir" 	value="${zk.data.dir}" />
      <entry  key="clientPort" 	value="2181" />
    </propertyfile>
  </target>

  <target name="add-permissions-zookeeper" depends="download-zookeeper" description="enables zookeeper scripts for execution">
    <chmod dir="${zk.bin.dir}" perm="+x" includes="**/*.sh" />
  </target>

  <target name="zookeeper-start" depends="write-zoo-cfg, add-permissions-zookeeper" description="starts the zookeeper service">
    <exec executable="${zk.server.script}">
      <arg value="start"/>
    </exec>
  </target>

  <target name="zookeeper-stop" depends="download-zookeeper, add-permissions-zookeeper" description="stops the zookeeper service">
    <exec executable="${zk.server.script}">
      <arg value="stop"/>
    </exec>
  </target>
  <!-- ========= ZooKeeper targets END ========= -->

  <!-- Group all dependencies into a big dependency-all.jar -->
  <target name="copy-dependencies" depends="resolve" description="consolidates dependencies in one jar">
    <jar jarfile="${dependencies.jar.file}">
      <zipgroupfileset dir="${lib.dir}">
        <include name="**/*.jar" />
      </zipgroupfileset>
    </jar>
  </target>

  <target name="init" depends="resolve">
    <mkdir dir="${build.dir}"/>
    <copy includeemptydirs="false" todir="${build.dir}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.launch"/>
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <target name="clean">
    <delete dir="${build.dir}" />
    <delete file="${clientjar.file}" />
    <delete file="${clientmanifest.file}" />
    <delete file="${serverjar.file}" />
    <delete file="${servermanifest.file}" />
    <delete file="${ecsjar.file}" />
    <delete file="${ecsmanifest.file}" />
    <delete file="${dependencies.jar.file}" />
  </target>

  <target name="cleanall" depends="clean"/>

  <!-- build complete project -->
  <target name="build" depends="init">
    <echo message="${ant.project.name}: ${ant.file}"/>
    <javac debug="true" debuglevel="${debuglevel}" destdir="bin"
          source="${source}" target="${target}"
          classpathref="project.classpath" includeantruntime="false">
      <src path="${src.dir}"/>
    </javac>
  </target>

  <!-- build client jar -->
  <target name="build-client-jar" depends="build, copy-dependencies">
    <delete file="${clientjar.file}" />
    <delete file="${clientmanifest.file}" />

    <manifest file="${clientmanifest.file}" >
      <attribute name="built-by" value="${user.name}" />
      <attribute name="Main-Class" value="${clientmain.class}" />
      <attribute name="Class-Path" value="${project.classpath}"/>
    </manifest>

    <jar destfile="${clientjar.file}" basedir="${build.dir}"
        manifest="${clientmanifest.file}">
      <zipfileset src="${dependencies.jar.file}" excludes="META-INF/*.SF" />
    </jar>
  </target>

  <!-- build server jar -->
  <target name="build-server-jar" depends="build, copy-dependencies">
    <delete file="${serverjar.file}" />
    <delete file="${servermanifest.file}" />

    <manifest file="${servermanifest.file}" >
      <attribute name="built-by" value="${user.name}" />
      <attribute name="Main-Class" value="${servermain.class}" />
      <attribute name="Class-Path" value="${project.classpath}"/>
    </manifest>

    <jar destfile="${serverjar.file}" basedir="${build.dir}"
        manifest="${servermanifest.file}">
      <zipfileset src="${dependencies.jar.file}" excludes="META-INF/*.SF" />
    </jar>
  </target>

  <!-- build ecs jar -->
  <target name="build-ecs-jar" depends="build, copy-dependencies">
    <delete file="${ecsjar.file}" />
    <delete file="${ecsmanifest.file}" />

    <manifest file="${ecsmanifest.file}" >
      <attribute name="built-by" value="${user.name}" />
      <attribute name="Main-Class" value="${ecsmain.class}" />
      <attribute name="Class-Path" value="${project.classpath}"/>
    </manifest>

    <jar destfile="${ecsjar.file}" basedir="${build.dir}"
        manifest="${ecsmanifest.file}">
      <zipfileset src="${dependencies.jar.file}" excludes="META-INF/*.SF" />
    </jar>
  </target>

  <!-- generate separate jar files for client and server application -->
  <target name="build-jar" depends="build-client-jar, build-server-jar, build-ecs-jar" />

  <!-- run test cases -->
  <target name="test" depends="build">
    <junit>
      <classpath refid="project.classpath" />
      <formatter type="brief" usefile="false" />
      <test name="testing.AllTests" />
    </junit>
  </target>

  <target name="run" >
    <java classname="${main.class}" classpathref="class.path"/>
  </target>

</project>
